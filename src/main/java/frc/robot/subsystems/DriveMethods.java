// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants;



// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class DriveMethods extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
    *
    */
    private final DriveTrain m_driveTrain;
    //private final Balence m_Balence;
    public DriveMethods(DriveTrain subsystem, Balence balence) {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        m_driveTrain = subsystem;
        //m_Balence = balence;
    

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }



    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    public void driveForward(double time) {
        Timer timer = new Timer();
        timer.reset();
        timer.start();
        while (timer.get() < time) {
            m_driveTrain.drive(-Constants.DriveConstants.kAutonomousLeftDriveSpeed, -Constants.DriveConstants.kAutonomousRightDriveSpeed);
        }           
            m_driveTrain.drive(0,0);
        return;
        
    }

    public void driveBackwards(double time) {
        Timer timer = new Timer();
        timer.reset();
        timer.start();
        while (timer.get() < time) {
            m_driveTrain.drive(Constants.DriveConstants.kAutonomousLeftDriveSpeed, Constants.DriveConstants.kAutonomousRightDriveSpeed);
        }           
            m_driveTrain.drive(0,0);
        return;
        
    }
    public void driveTurnL(double time) {
        Timer timer = new Timer();
        timer.reset();
        timer.start();
        while (timer.get() < time) {
            m_driveTrain.drive(Constants.DriveConstants.kAutonomousLeftDriveSpeed, -Constants.DriveConstants.kAutonomousRightDriveSpeed);
        }           
            m_driveTrain.drive(0,0);
        return;
        
    }

    public void driveTurnR(double time) {
        Timer timer = new Timer();
        timer.reset();
        timer.start();
        while (timer.get() < time) {
            m_driveTrain.drive(-Constants.DriveConstants.kAutonomousLeftDriveSpeed, Constants.DriveConstants.kAutonomousRightDriveSpeed);
        }           
            m_driveTrain.drive(0,0);
        return;
        
    }

    public void driveTurn180() {
        Timer timer = new Timer();
        timer.reset();
        timer.start();
        while (timer.get() < 5) {
            m_driveTrain.drive(-Constants.DriveConstants.kAutonomousLeftDriveSpeed, Constants.DriveConstants.kAutonomousRightDriveSpeed);
        }           
            m_driveTrain.drive(0,0);
        return;
        
    }

    public void driveStop() {
        m_driveTrain.drive(0,0);
    }

    public void drivePause(int time) {
        Timer timer = new Timer();
        timer.reset();
        timer.start();
        while (timer.get() < time) {
            m_driveTrain.drive(0,0);
        }    
        return;
    
    }

    public void intakeRelease(int time) {
        Timer timer = new Timer();
        timer.reset();
        timer.start();
        while (timer.get() < time) {
            //put code
        }    
        return;
    
    }

    public void autoBalence() {
            //while (Math.abs(m_Balence.getTilt()) >= Constants.DriveConstants.kOffBalence){
                //if (m_Balence.getTilt() > 0){
                    //driveForward(.2);
                //}
                //if (m_Balence.getTilt() < 0){
                    //driveBackwards(.2);
               // }
            //}
            //return;
    
    }

    public void advancedBalence() {
        //while (Math.abs(m_Balence.getTilt()) >= Constants.DriveConstants.kOffBalence){
            //if (m_Balence.getTilt() > 0){
                //driveForward(0.2 * (Math.abs(m_Balence.getTilt()) / Constants.DriveConstants.kOffBalence));
            //}
            //if (m_Balence.getTilt() < 0){
                //driveBackwards(0.2 * (Math.abs(m_Balence.getTilt()) / Constants.DriveConstants.kOffBalence));
            //}
        //}
        //return;

    }
}
