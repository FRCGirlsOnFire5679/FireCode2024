// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
//import edu.wpi.first.wpilibj.motorcontrol.Spark;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkBase.IdleMode;
import com.revrobotics.CANSparkLowLevel.MotorType;






// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class DriveTrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private CANSparkMax frontLeftController;
    private CANSparkMax rearLeftController;
    private CANSparkMax frontRightController;
    private CANSparkMax rearRightController;
    private DifferentialDrive robotDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
    *
    */
    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        frontLeftController = new CANSparkMax(Constants.DriveConstants.kLeftMotorFrontPort, MotorType.kBrushed);
        frontLeftController.setInverted(false);

        rearLeftController = new CANSparkMax(Constants.DriveConstants.kLeftMotorBackPort, MotorType.kBrushed);
        rearLeftController.setInverted(false);

        frontRightController = new CANSparkMax(Constants.DriveConstants.kRightMotorFrontPort, MotorType.kBrushed);
        frontRightController.setInverted(true);

        rearRightController = new CANSparkMax(Constants.DriveConstants.kRightMotorBackPort, MotorType.kBrushed);
        rearRightController.setInverted(true);

        robotDrive = new DifferentialDrive(rearLeftController, rearRightController);
        addChild("Robot Drive", robotDrive);
        robotDrive.setSafetyEnabled(true);
        robotDrive.setExpiration(0.1);
        robotDrive.setMaxOutput(1.0);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void drive(double left, double right) {
        robotDrive.tankDrive(left, right);
    }

    public void sprint(double left, double right){
        robotDrive.tankDrive(left * Constants.DriveConstants.kSprintLeftSpeedFactor, right * Constants.DriveConstants.kSprintRightSpeedFactor);
    }

    public void crawl(double left, double right, double pressed){
        //double crawlFactor = (pressed - 0.5) * 2;
        
        double offset = 1 - pressed;
        double diffrenceRight = 1 - Constants.DriveConstants.kCrawlRightSpeedFactor;
        double diffrenceLeft = 1 - Constants.DriveConstants.kCrawlLeftSpeedFactor;
        double crawlFactorRight = (diffrenceRight * offset) + Constants.DriveConstants.kCrawlRightSpeedFactor;
        double crawlFactorLeft = (diffrenceLeft * offset) + Constants.DriveConstants.kCrawlLeftSpeedFactor;
        
        robotDrive.tankDrive(left * crawlFactorLeft, right * crawlFactorRight);
    }

    public void setBrake(){
        frontLeftController.setIdleMode(IdleMode.kBrake);
        frontRightController.setIdleMode(IdleMode.kBrake);
        rearRightController.setIdleMode(IdleMode.kBrake);
        rearLeftController.setIdleMode(IdleMode.kBrake);
    }

    public void setCoast(){
        frontLeftController.setIdleMode(IdleMode.kCoast);
        frontRightController.setIdleMode(IdleMode.kCoast);
        rearRightController.setIdleMode(IdleMode.kCoast);
        rearLeftController.setIdleMode(IdleMode.kCoast);
    }
}
